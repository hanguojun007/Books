---
title: "Date and Times.qmd"
author: "大番薯本薯"
date: "2025-02-01"
date-modified: "2025-02-01"
format: "html"
fig-width: 4
fig-height: 4
fig-align: center
execute:
  warning: false
---

```{r}
#| echo: false

source("_common.R")
```

# 日期与时间

本章介绍 tidyverse 核心包 lubridate 对日期与时间的处理。

```{r}
#| message: false

library(tidyverse)
library(nycflights13)
```

## R base 中日期时间基础知识

### ISO0861 标准

R 使用国际标准**ISO8601**存储日期时间：

-   年月日之间使用`-`连接。
-   时分秒之间使用`:`连接。
-   日期与时间之间使用空格或`T`连接。
-   时间使用24小时制。

例如2025年2月9日下午4时29分49秒写作`2025-02-09 16:29:49`。

获取当前日期及时间：

```{r}
today()
now()
```

### 格式化

R base 提供了`format.POSIXct()`（可以简写为`format()`）对日期时间进行格式化。函数有四个参数：

-   `x`：时间字符串。
-   `tz`：时区，`""`代表本地时区，`"GMT"`等价于`UTC`，无效的时区参数会自动转换为`UTC`并生成警告。
-   `format`：格式化参数，例如\`"%Y-%m-%d %H:%M%:%S"。
-   `usetz`：是否使用时区，默认`FALSE`。

下表是 R 中对日期时间进行 format 格式化的总结：

| Type  | Code   | Meaning                        | Example         |
|-------|--------|--------------------------------|-----------------|
| Year  | `%Y`   | 4 digit year                   | 2021            |
|       | `%y%`  | 2 digit year                   | 21              |
| Month | `%m%`  | Number                         | 2               |
|       | `%b%`  | Abbreviated name               | Feb             |
|       | `%B%`  | DUll name                      | February        |
| Day   | `%d%`  | One or two digits              | 2               |
|       | `%e%`  | Two digits                     | 02              |
| Time  | `%H%`  | 24-hour hour                   | 13              |
|       | `%I%`  | 12-hour hour                   | 1               |
|       | `%p%`  | AM/PM                          | pm              |
|       | `%M%`  | Minutes                        | 35              |
|       | `%S%`  | Seconds                        | 42              |
|       | `%OS%` | Seconds with decimal component | 45.35           |
|       | `%Z%`  | Time zone name                 | America/Chicago |
|       | `%z%`  | Offset from UTC                | +800            |
| Other | `%.%`  | Skip one non-digit             | :               |
|       | `%*%`  | Skip any number of non-digits  |                 |

```{r}
DateTime <- as.POSIXct("2025-02-09 16:29:49")
format.POSIXct(DateTime)
format(DateTime, usetz = TRUE)
format(DateTime, format = "%y-%b-%d %I%p:%M:%OS")
```

在tidyverse中有三种`date/time`：

-   `date`：日期，tibble中标记为`<date>`。
-   `time`：时间，tibble中标记为`<time>`。
-   `date-time`：日期-时间，tibble中标记为`<dttm>`。

在 base R 中不提供`time`类型，可以使用**hms**包生成。

## 生成日期时间

时间类型的数据可以从以下四个方面获取：

-   读取数据
-   字符串转换
-   日期时间字符串拼接
-   从已有日期时间中获取

### 读取数据

readr 会自动识别 ISO0861 类型的日期时间，在读取时可通过`col_date()`函数设置日期时间格式。

```{r}
csv <- "
  date,datetime
  01/02/15,2022-01-02 05:12
"
read_csv(csv)
read_csv(csv, col_types = cols(date = col_date("%m/%d/%y")))
read_csv(csv, col_types = cols(date = col_date("%d/%m/%y")))
read_csv(csv, col_types = cols(date = col_date("%y/%m/%d")))
```

### 字符串转换

`lubridate`包提供了由`y`,`m`,`d`,`h`,`m`,`s`组成的函数用来解析时间字符串，无法解析时返回`NA`，并报警。

```{r}
ymd("2017-01-31")
ymd(c("2010-10-10", "bananas"))
mdy("January 31st, 2017")
dmy("31-Jan-2017")
ymd_hms("2017-01-31 20:11:59")
mdy_hm("01/31/2017 08:01")
```

通常上述函数足够应对很多格式的数据，但是无法解析带有`AM/PM`字样的时间，需要使用`parse_date_time()`解析。

```{r}
mdy("January 1, 2010")
ymd("2015-Mar-07")
dmy("06-Jun-2017")
mdy(c("August 19 (2015)", "July 1 (2015)"))
mdy("12/30/14")
hm("1705")
parse_date_time("11:15:10.12 PM", orders = "I:M:S p")
```

### 日期时间字符串拼接

有时年月日时分秒分别在一个向量中，拼接之后转换似乎太麻烦，可以直接使用`make_date()`或`make_datetime()`。

```{r}
flights |>
  select(year, month, day, hour, minute) |>
  mutate(departure = make_datetime(year, month, day, hour, minute))
```

### 从已有日期时间中获取

使用`as_datetime()`或`as_date()`进行日期与时间的转换。

```{r}
as_datetime(today())
as_date(now())
```

也可以作用于数字，日期按照1等于1天，时间按照1等于1秒，从1970-01-01开始计算。

```{r}
as_datetime(60 * 60 * 10)
as_date(365 * 10 + 2)
```

## 解析日期时间

### 解析

下面介绍一些函数对日期时间进行解析：

-   `year()`：日期中的年。
-   `month()`：日期中的月，使用`label`参数设置是否转换为文字，`abbr`参数设置是否简写。
-   `yday()`：该年第几天。
-   `mday()`：该月第几天。
-   `wday()`：该周第几天。
-   `hour()`：时间中的小时。
-   `minute()`：时间中的分。
-   `secend()`：时间中的秒。

```{r}
datetime <- ymd_hms("2026-07-08 12:34:56")

year(datetime)
month(datetime, label = TRUE, abbr = FALSE)
yday(datetime)
mday(datetime)
wday(datetime)
hour(datetime)
```

### 修改

上述函数不仅可以用来解析，也可以用来修改

```{r}
datetime <- ymd_hms("2026-07-08 12:34:56")

year(datetime) <- 2030
datetime

month(datetime) <- 01
datetime

hour(datetime) <- hour(datetime) + 1
datetime

```

除此之外，还可以使用`update()`进行多个地方的修改（`update`函数类似`getCall`）。

```{r}
update(datetime, year = 2030, month = 2, mday = 2, hour = 2)
```

### 近似

lubridate 提供了三个函数对日期时间根据单位进行近似。

-   `round_date()`：四舍五入。
-   `floor_date()`：向下取整。
-   `ceiling_date()`：向上取整。

```{r}
x <- ymd_hms("2009-08-03 12:01:59.23")
round_date(x, ".5s")
round_date(x, "5 mins")
round_date(x, "year")
floor_date(x, ".5s")
floor_date(x, "minute")
floor_date(x, "hour")
ceiling_date(x, ".5 sec") # 默认不显示秒的小数位。
format(ceiling_date(x, ".5 sec"), "%Y-%m-%d %H:%M:%OS3")
ceiling_date(x, "second")
ceiling_date(x, "minute")
ceiling_date(x, "5 mins")
ceiling_date(x, "hour")
```


## 时间段

lubridate 包对时间段给出了三种划分：

-   duration：通常单位是秒，给出时间段具体有多少秒，通常用于物理计算。
-   period：使用人类常见单位，比如周，月，时间段不固定。
-   interval：给定具有固定开始与结束的时间段。

### duration

lubridate 包中的`duration()`函数用来生成一个以参数`units`控制单位的时间跨度。同时提供额外函数，精确到秒，给出每年`dyears()`，每月`dmonths()`，每周`dweeks()`，每天`ddays()`，每时`dhours()`，每分`dminutes()`，每秒`dseconds()`，每毫秒`dmilliseconds()`，每微秒`dmicroseconds()`，每纳秒`dnanoseconds()`，每皮秒`dpicoseconds()`有多少秒。

```{r}
duration(1, units = "year")
dyears(1)
ddays(1)
dpicoseconds(1)
```

上述函数可以进行四则运行计算时间

```{r}
2 * dyears(1)
dyears(1) + dweeks(12) + dhours(15)
```

### periods

lubridate 包中`period()`函数同样生成一个以参数`units`控制单位的时间跨度。同时提供额外函数一年`years()`，一个月`base::months()`，一周`weeks()`，一天`days()`，一小时`hours()`，一分钟`minutes()`，一秒`secends()`，一毫秒`milliseconds()`，一微秒  `microseconds()`，一纳秒`nanoseconds(x = 1)`，一皮秒`picoseconds(x = 1)`。

```{r}
years(1)
months(1)
weeks(1)
days(7)
hours(c(12, 24))
```

同样可以进行四则运行

```{r}
10 * (months(6) + days(1))
#> [1] "60m 10d 0H 0M 0S"
days(50) + hours(25) + minutes(2)
#> [1] "50d 25H 2M 0S"
```

period 与 duration 不同点在于：duration 的时间跨度是固定的，有多少秒就是多少秒；period 的时间跨度不是固定的，与不同日期时间计算跨度不同。

```{r}
# 闰年
ymd("2024-01-01") + dyears(1)
ymd("2024-01-01") + years(1)
```

### interval

使用`dyears(1) / ddays(1)`或`years(1) / days(1)`计算一年，你会发现结果都是365.25，无法准确地给出某一年有多少天。

```{r}
dyears(1) / ddays(1)
years(1) / days(1)
```

使用`start %--% end`格式的interval即可准确的记录一年有多少天。

```{r}
y2023 <- ymd("2023-01-01") %--% ymd("2024-01-01")
y2024 <- ymd("2024-01-01") %--% ymd("2025-01-01")

y2023 / days(1)
y2024 / days(1)
```

## 时区

R 采用的是IANA（https://www.iana.org/time-zones）数据库中的时区，格式为`{area}/{location}`。可以使用`OlsonNames()`进行查看。

```{r}
Sys.timezone()
length(OlsonNames())
head(OlsonNames())
```

时区的作用用来显示当地的时间，计算实际背后代表的数值时要考虑时区，下面三个时区的时间本质是相等的。

```{r}
x1 <- ymd_hms("2024-06-01 12:00:00", tz = "America/New_York")
x1

x2 <- ymd_hms("2024-06-01 18:00:00", tz = "Europe/Copenhagen")
x2

x3 <- ymd_hms("2024-06-02 04:00:00", tz = "Pacific/Auckland")
x3

x1 - x2
x1 - x3
```

对日期时间的操作会丢掉时区，例如使用`c()`。

```{r}
x4 <- c(x1, x2, x3)
x4
```

对时区的更改有两个函数：

-   `with_tz()`：不更改本质时间，只是换一种显示方式。
-   `force_tz()`：更改本质时间，因为显示的时间正确但时区错误，用来修改错误。

```{r}
x4a <- with_tz(x4, tzone = "Australia/Lord_Howe")
x4a
x4a - x4

x4b <- force_tz(x4, tzone = "Australia/Lord_Howe")
x4b
x4b - x4
```