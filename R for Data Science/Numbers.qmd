---
title: "Numbers"
author: "大番薯本薯"
date: "2025-01-26"
date-modified: "2025-01-26"
format: "html"
fig-width: 4
fig-height: 4
fig-align: center
execute:
  warning: false
---
```{r}
#| echo: false

source("_common.R")
```

# tidyverse 中数值向量处理

本章介绍tidyverse中数值向量的处理。

```{r}
#| message: false

library(tidyverse)
library(nycflights13)
```

## 生成number

readr 提供两解析器将字符串转换为数值：

- `parse_double()` 解析数值
- `parse_number()` 解析数值，忽略非数值字符

```{r}
x <- c("1.2", "5.6", "1e3")
parse_double(x)
x <- c("$1,234", "USD 3,513", "59%")
parse_number(x)
```

## 计数

### count()

`count()` 函数用于统计向量中每个变量的唯一值出现次数。参数有：

-   `x`：数据框
-   `...`：分组变量
-   `wt`：权重变量
-   `sort`：是否按频数排序
-   `name`：频数列名
-   `.drop`：是否删除空组，当分组变量为因子时有效。

与`count()`类似的函数还有:

-   `tally()`：统计总数
-   `add_count()`：添加频数列
-   `add_tally()`：添加总数列

`df |> count(a, b)` 等价于 `df |> group_by(a, b) |> summarise(n = n())`。

`df |> count(a, b, wt = c)` 等价于 `df |> group_by(a, b) |> summarise(n = sum(c))`。

`df |> tally()` 等价于 `df |> summarise(n = n())`。

`df |> tally(wt = c)` 等价于 `df |> summarise(n = sum(c))`。

`add_count()` 和 `add_tally()` 与 `count()` 和 `tally()` 类似，只是不使用`summarise()`，而是使用`mutate()`。

```{r}
flights |> count(tailnum, wt = distance)

flights |>
  group_by(tailnum) |>
  summarise(n = sum(distance))

flights |> tally(wt = distance)

flights |> summarise(n = sum(distance))
```

### n()

`n()` 是一个特殊的函数，它返回当前组的大小。它只能在 `summarise()`、`mutate()` 和 `filter()` 等中使用。

```{r}
#| error: true

n()
```

`n_distinct()` 返回向量中唯一项的数目。类似于 `length(unique(x))`。

```{r}
flights |>
  group_by(dest) |>
  summarize(carriers = n_distinct(carrier)) |>
  arrange(desc(carriers))
```

## 数值转换

### 向量循环复用规则

R 中进行数值计算（加减乘除等）时，如果两个向量的长度不同，R 会自动将较短的向量循环复用，直到与较长的向量长度相同。例如:

```{r}
x <- c(1, 2, 10, 20)
x / 5
x / c(5, 5, 5, 5)
```

当两个向量的长度不是整数倍关系时，R 会给出警告:

```{r}
#| warning: true

x * c(1, 2)
x * c(1, 2, 3)
```

除数值计算外，前章涉及的比较运算也会循环复用向量。当使用`==`时，要小心向量循环复用规则。例如，下面的代码试图找出 1 月 和 2 月起飞的所有航班，虽然没有报错，但是少了一些行；因为 R 循环复用`c(1, 2)`，所以实际比较的是奇数行是否为 1 月，偶数行是否为 2 月。

```{r}
# 循环复用
flights |>
  filter(month == c(1, 2))

# 没有循环复用
flights |>
  filter(month %in% c(1, 2))
```

### 最小值和最大值

R base 中的`min()`,`max()`会返回一个向量中的最小值和最大值; `pmin()` 和 `pmax()` 会返回一组向量中每个位置的最小值和最大值。

```{r}
df <- tribble(
  ~x, ~y,
  1, 3,
  5, 2,
  7, NA,
)
# pmin / pmax
df |>
  mutate(
    min = pmin(x, y, na.rm = TRUE),
    max = pmax(x, y, na.rm = TRUE)
  )
# min / max
df |>
  mutate(
    min = min(x, y, na.rm = TRUE),
    max = max(x, y, na.rm = TRUE)
  )
```

### 模运算

R base 提供了模运算函数 `%%` 和 `%/%`，分别用于计算余数和整数除法。

```{r}
1:10 %/% 3
1:10 %% 3
```

### 指数对数运算

对数运行：`log()` 计算自然对数，`log2()` 和 `log10()` 分别计算以 2 和 10 为底的对数。`log1p()` 计算 `log(1 + x)`。

指数运行：`exp()` 计算自然指数，`expm1()` 计算 `exp(x) - 1`，当 `x` 接近 0 时更精确。其他指数使用`^` 计算。

### 约数

R base 提供了五种约数的函数：

-   `round()`：四舍五入

-   `floor()`：向下取整

-   `ceiling()`：向上取整

-   `trunc()`：只保留整数部分

-   `signif()`：四舍五入到有效数字位

```{r}
round(123.456)
round(123.456, 2)
floor(123.456)
ceiling(123.456)
trunc(123.456)
signif(123.456, 3)
signif(0.00123456, 3)
```

#### 四舍五入规则
R 的 `round()` 函数遵循 IEEE 754 标准，采用 **四舍六入五成双** 的规则，这样做可以消除四舍五入造成的数据分布偏移。其规则如下：

-   如果小数点后的数字恰好是 5，且 5 后面没有其他非零数字：

    -   检查小数点前的数字（即整数部分）是奇数还是偶数。

    -   如果整数部分是奇数，则向上舍入（向更大的偶数方向）。

    -   如果整数部分是偶数，则向下舍入（保持为偶数）。

-   如果小数点后的数字不是 5，或者 5 后面还有非零数字：

    -   按照常规的四舍五入规则处理。

在实际的运算中，浮点数的储存值与表示值可能会有微小的误差，导致舍入结果与预期不符。

```{r}
round(c(1.5, 2.5, 1.51, 2.51))
# 值可能是0.1或0.2
round(0.15, 1)
```

### 数值分区

R base 提供了 `cut()` 函数，用于将数值向量分割成不同的区间。`cut()` 函数的参数有：

-   `x`：数值向量。
-   `breaks`：指定分割点，可以是一个整数（表示区间的数量，大于等于2）或一个数值向量（表示具体的分割点）。
-   `labels`：值为`FALSE`时，返回区间的索引；值为`NULL`时，返回区间的默认标签`"(a,b]"`；值为字符向量时，返回自定义的标签。
-   `right`：逻辑值，决定区间是左开右闭（`TRUE`）还是左闭右开（`FALSE`）。
-   `include.lowest`：逻辑值，决定是否包含最小值（`right = TRUE`）或最大值（ `right = FALSE`）。
-   `dig.lab`：整数，当`labels = NULL`时，控制标签的位数。
-   `ordered_result`：逻辑值，决定是否返回有序因子。


```{r}
x <- c(1, 2, 5, 10, 15, 20)
# 固定区间数目
cut(x, breaks = 3, dig.lab = 3)
# 默认标签
cut(x, breaks = c(0, 5, 10, 15, 20))
# 自定义标签
cut(x,
  breaks = c(0, 5, 10, 15, 20),
  labels = c("sm", "md", "lg", "xl")
)
# 不使用标签
cut(x, breaks = c(0, 5, 10, 15, 20), labels = FALSE)
# 包含最小值
cut(x, breaks = c(0, 5, 10, 15, 20), include.lowest = TRUE)
# 左闭右开区间
cut(x, breaks = c(0, 5, 10, 15, 20), right = FALSE)
# 返回有序因子
cut(x, breaks = c(0, 5, 10, 15, 20), ordered_result = TRUE)
```

### 累计与滑动汇总

R base 提供了一系列累计和滑动汇总函数：

-   `cumsum()`：累计求和
-   `cumprod()`：累计求积
-   `cummin()`：累计最小值
-   `cummax()`：累计最大值

```{r}
x <- c(2, 1, 3, 2, 5, 3, 4)
cumsum(x)
cumprod(x)
cummin(x)
cummax(x)
```

R包`[slider](https://slider.r-lib.org/)`提供了更多的滑动汇总函数。

## 通用转换

下面介绍一些不仅可以用于数值型向量，也可以用于其他类型向量的转换。

### 排序（rnak）

R base 提供了生成向量秩的函数——`rank()`。有三个参数：

-   `x`：a numeric, complex, character or logical vector.
-   `na.last`：如何处理`NA`：`FALSE`时位于首位；`TRUE`时位于末位；`NA`时移除；`keep`时保持原状。
-   `ties.method`：处理重复值的方法：`"average"`,`"first"`,`"last"`,`"random"`,`"max"`,`"min"`。

```{r}
x <- c(1, 3, 3, 5, NA, 9)
rank(x, ties.method = "average", na.last = "keep")
rank(x, ties.method = "average", na.last = NA)
rank(x, ties.method = "average")
rank(x, ties.method = "first")
rank(x, ties.method = "last")
rank(x, ties.method = "random")
rank(x, ties.method = "max")
rank(x, ties.method = "min")
```

dplyr 提供了两大类处理排序问题的函数：

-   整数排序

    -   `row_number()`：等价于`rank(ties.method = "first")`。不添加参数时可以生成当前行数。
    -   `min_rank()`：等价于`rank(ties.method = "min")`。
    -   `dense_rank()`：类似于`min_rank()`，但是秩之间没有间隙。

-   比例排序

    -   `cume_dist()`：计算小于等于`${x_i}`的个数，除以`x`的长度。
    -   `percent_rank()`：计算小于`${x_i}`的个数，除以`x`的长度减1。

使用`desc()`函数生成相反的秩。

```{r}
df <- tibble(x = x)
df |>
  mutate(
    row_number = row_number(x),
    row_number_desc = row_number(desc(x)),
    min_rank = min_rank(x),
    dense_rank = dense_rank(x),
    cume_dist = cume_dist(x),
    percent_rank = percent_rank(x)
  )
```

### 偏移（offset）

dplyr 包提供了`lag()`和`lead()`函数，用于生成向前或向后偏移的向量，不足部分补齐。

-   `n`：控制偏移量
-   `default`：控制补齐值，默认使用`NA`。

```{r}
x <- c(2, 5, 11, 11, 19, 35)
lag(x, n = 2)
lead(x, default = 0)
```

### 连续标识符

在实际工作中，我们可能会有这种需求：给定一组有序数据，将数据中连续相同的值标记为同一组，将不同或不连续的值标记为其他组。比如每天记录是否下雨，将连续下雨的天标记为一组。

dplyr 包提供了`consecutive_id()`函数，受`data.table::rleid()`启发。

```{r}
consecutive_id(c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, NA, NA))
consecutive_id(c(1, 1, 1, 2, 1, 1, 2, 2))
```

下面的示例来自于[stackoverflow](https://stackoverflow.com/questions/27482712/remove-collapse-consecutive-duplicate-values-in-sequence)，要求x中连续项只保留第一个。

```{r}
df <- tibble(
  x = c("a", "a", "a", "b", "c", "c", "d", "e", "a", "a", "b", "b"),
  y = c(1, 2, 3, 2, 4, 1, 3, 9, 4, 8, 10, 199)
)

df |>
  group_by(id = consecutive_id(x)) |>
  slice_head(n = 1)
```

## 统计汇总

R base 提供了许多用于统计汇总的函数：

-   `mean()`：求均值
-   `sd()`：求方差
-   `min()`：求最小值
-   `median()`：求中值
-   `max()`：求最大值
-   `quantile(x, probs = 0.95, na.rm = T)`：求分位数
-   `IQR()`：等同于`IQR(x) = quantile(x, 3/4) - quantile(x, 1/4)`

dplyr 包提供了获取向量中某个位置的值：

-   `first()`
-   `nth()`
-   `last()`

```{r}
x <- c(2, 3, 4, 2, 1, 2, 4, 0, 6)
mean(x)
sd(x)
min(x)
median(x)
max(x)
quantile(x, probs = 0.25)
quantile(x, probs = 0.75)
IQR(x)
first(x)
nth(x, 3)
last(x)
```