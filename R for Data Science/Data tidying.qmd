---
title: "Data tidying.qmd"
author: "大番薯本薯"
date: "2025-01-21"
date-modified: "2025-01-21"
format: "html"
fig-width: 4
fig-height: 4
fig-align: center
execute:
  warning: false
---

# Data tidying

本章主要学习使用`tidyr`包中的`piot_longer()`和`pivot_wider()`进行数据整理。

```{r}
library(tidyverse)
```

## Tidy data

tidy data 是数据整理的标准，它使数据更容易在R中操作、建模和可视化。tidy 数据有三个特定：

-   每个变量占一列
-   每个观测占一行
-   每个值占一个单元格

![](image/tidy-1.png)

我们常见的基因表达矩阵需要转置才能满足tidy data的要求。

## Lengthening data

所谓长数据就是每一行一个观测，一个变量，一个值。即：

|sample|gene|expression|
|------|----|----------|
|A|gene1|1.2|
|A|gene2|1.3|
|B|gene1|1.4|
|B|gene2|1.5|

::: {.callout-tip}
实际处理数据过程中，什么是观测，什么是变量，要视数据分析目的而定。
:::

### pivot_longer()

`piovt_longer()` 函数的参数如下：

#### 重要参数

-   `data`: 数据框。

-   `cols`：需要转换的列，列数应该大于1，可以使用select()函数中的语法。

-   `names_to`：转换列的列名生成新列时的列名，可以是一个字符串，也可以是一个字符向量，作用不同。如图2。

-   `values_to`：转换列的值生成新列时的列名。如图3。

![图1](image/variables.png)

![图2](image/column-names.png)

![图3](image/cell-values.png)

-   `names_prefix`：转换列的列名生成新列时要去除的前缀。

-   `names_sep`：当`names_to`参数为字符向量时，提供一个分隔符将转换列的列名进行分割，生成多个新列。如图4，图5。

-   `names_pattern`：同上，提供一个正则表达式。

-   `values_drop_na`：是否删除NA值的行，默认是FALSE。

![图4](image/multiple-names.png)

![图5](image/names-and-values.png)

#### 可选参数

-   `cols_vary`：转换后的行顺序排列方法，默认是"fastest"，即按照行的顺序进行转换排列；"slowest"则是按照列的顺序转换排列。

-   `names_ptypes`/`values_ptypes`：固定转换后的列类型，使用方法`names_ptypes = list(new_col = double())`。

-   `names_transform`/`values_transform`：修改转换后的列类型，使用方法同上。

-   `names_repair`：转换后的列名不符合要求时的处理方式。更多处理方式见：`?vctrs::vec_as_names`。

### `names_to`参数为字符串向量时的两种情况

#### 待转换列的列名包含多个信息

查看下面的数据集，`sp_m_014`等列名中包含了多个信息，分别是：结核病类型、性别和年龄组。

```{r}
#| eval: false

who2
#> # A tibble: 7,240 × 58
#>   country      year sp_m_014 sp_m_1524 sp_m_2534 sp_m_3544 sp_m_4554
#>   <chr>       <dbl>    <dbl>     <dbl>     <dbl>     <dbl>     <dbl>
#> 1 Afghanistan  1980       NA        NA        NA        NA        NA
#> 2 Afghanistan  1981       NA        NA        NA        NA        NA
#> 3 Afghanistan  1982       NA        NA        NA        NA        NA
#> 4 Afghanistan  1983       NA        NA        NA        NA        NA
#> 5 Afghanistan  1984       NA        NA        NA        NA        NA
#> 6 Afghanistan  1985       NA        NA        NA        NA        NA
#> # ℹ 7,234 more rows
#> # ℹ 51 more variables: sp_m_5564 <dbl>, sp_m_65 <dbl>, sp_f_014 <dbl>, …
```

可以使用`names_sep`参数指定分隔符，将列名拆分为多个列。

```{r}
#| eval: false

who2 |>
  pivot_longer(
    cols = !(country:year),
    names_to = c("diagnosis", "gender", "age"),
    names_sep = "_",
    values_to = "count"
  )
#> # A tibble: 405,440 × 6
#>   country      year diagnosis gender age   count
#>   <chr>       <dbl> <chr>     <chr>  <chr> <dbl>
#> 1 Afghanistan  1980 sp        m      014      NA
#> 2 Afghanistan  1980 sp        m      1524     NA
#> 3 Afghanistan  1980 sp        m      2534     NA
#> 4 Afghanistan  1980 sp        m      3544     NA
#> 5 Afghanistan  1980 sp        m      4554     NA
#> 6 Afghanistan  1980 sp        m      5564     NA
#> # ℹ 405,434 more rows
```

#### 待转换列的列名中包含新的列名

下面的数据集中，`dob_child1` 和 `dob_child2` 是 `dob` 和 `child` 的组合，`name_child1` 和 `name_child2` 是 `name` 和 `child` 的组合。

```{r}
#| eval: false

household
#> # A tibble: 5 × 5
#>   family dob_child1 dob_child2 name_child1 name_child2
#>    <int> <date>     <date>     <chr>       <chr>
#> 1      1 1998-11-26 2000-01-29 Susan       Jose
#> 2      2 1996-06-22 NA         Mark        <NA>
#> 3      3 2002-07-11 2004-04-05 Sam         Seth
#> 4      4 2004-10-10 2009-08-27 Craig       Khai
#> 5      5 2000-12-05 2005-02-28 Parker      Gracie
```

参数`names_to`给定为`.value`，表示将列名中的值作为新列的名称。注意`.value`与分隔符分隔后产生的值顺序有关。

```{r}
#| eval: false

household |>
  pivot_longer(
    cols = !family,
    names_to = c(".value", "child"),
    names_sep = "_",
    values_drop_na = TRUE
  )
#> # A tibble: 9 × 4
#>   family child  dob        name
#>    <int> <chr>  <date>     <chr>
#> 1      1 child1 1998-11-26 Susan
#> 2      1 child2 2000-01-29 Jose
#> 3      2 child1 1996-06-22 Mark
#> 4      3 child1 2002-07-11 Sam
#> 5      3 child2 2004-04-05 Seth
#> 6      4 child1 2004-10-10 Craig
#> # ℹ 3 more rows
```


## Widening data

所谓宽数据就是每一列是一个变量，每一行是一个观测。即：

|sample|gene1|gene2|
|------|-|-|
|A|1.2|1.3|
|B|1.4|1.5|

::: {.callout-tip}
在实际的数据中有很多观察和变量，我们所说的长数据与宽数据都是针对于目的观测和目的变量而言。
:::

### pivot_wider()

`pivot_wider()` 函数的参数如下：

#### 重要参数

-   `data`： 数据框。
-   `id_cols`： 规定哪些列不会被转换。有两种情况：
    -   默认情况下，所有未在 `names_from` 和 `values_from` 中指定的列都不会被转换。
    -   如果指定了 `id_cols`，则只有指定的列不会被转换，同时会排除`names_from` 和 `values_from` 中指定的列。
-   `names_from`: 列名，用于生成新列名的列，可以是多个列。
-   `values_from`: 列名，用于生成新列值的列，可以是多个列。
-   `names_prefix`: 给新列名添加前缀。
-   `names_sep`：如果 `names_from` 或 `values_from` 包含多个变量，则使用此字符串连接它们的名称。
-   `names_glue`：同上，使用`.value`的方式进行组合。
-   `values_fill`：缺失值的填充方式，可以使用list形式，对不同列填充不同的值。

#### 可选参数

-   `names_sort`：是否对新列名进行排序。
-   `names_vary`：新列名的组合方式，默认是 `"fastest"`，即 `names_from` 和 `values_from` 的组合方式。
-   `id_expand`：`id_cols`是否使用`expand()`进行扩展，`expand()`的作用是补全因子中缺失的组合。
-   `names_expand`：同上。
-   `names_repair`：新列名错误时的修复方式，更多见`vctrs::vec_as_names()`。
-   `values_fn`：对 `values_from` 列进行处理的函数。
-   `unused_fn`：对未使用的列进行处理的函数。

#### `names_from` 来自多列

`names_from` 可以来自多列，此时新列名是这些列的组合，组合的连接字符由`names_sep` 参数控制。

```{r}
#| eval: false

dat <- tibble(
  id = c("A", "A", "B", "B", "C", "C"),
  name = c("x", "y", "x", "y", "x", "y"),
  number = c(1, 2, 1, 2, 1, 2),
  value = c(1, 2, 3, 4, 5, 6)
)

dat |>
  pivot_wider(
    id_cols = "id",
    names_from = c("name", "number"),
    values_from = "value",
    names_sep = "_"
  )
# # A tibble: 3 × 3
#   id      x_1   y_2
#   <chr> <dbl> <dbl>
# 1 A         1     2
# 2 B         3     4
# 3 C         5     6
```

#### `names_glue` 控制列名来自`values_from` 和`names_from` 的组合

与 `pivot_longer()`中`names_to`中的`.value`参数相反，`names_glue` 控制列名来自`values_from` 和`names_from` 的组合。

```{r}
#| eval: false

dat <- tibble(
  id = c("A", "A", "B", "B"),
  x = c(1, 2, 5, 6),
  y = c(3, 4, 7, 8),
  num = c(1, 2, 1, 2)
)

dat |>
  pivot_wider(
    id_cols = "id",
    names_from = "num",
    values_from = c("x", "y"),
    names_glue = "{.value}_{num}"
  )

# # A tibble: 2 × 5
#   id      x_1   x_2   y_1   y_2
#   <chr> <dbl> <dbl> <dbl> <dbl>
# 1 A         1     2     3     4
# 2 B         5     6     7     8
```

## more

更多对转换的介绍可以参考：`vignette("pivot", package = "tidyr")`