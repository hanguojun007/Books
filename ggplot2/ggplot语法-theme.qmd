---
title: "ggplot语法-theme"
author: "大番薯本薯"
format: "html"
fig-width: 4
fig-height: 4
fig-align: center
execute:
  warning: false
---

# ggplot语法-theme

ggplot 中唯一不对数据产生影响的设置就是`theme`，其只涉及像`font`,`tick`,`panel strip`,`background`等。

ggplot提供了四个层级的设置函数：

-   `elements`：具体的元素，如`plot.title`，`axis.ticks.x`。
-   `element function`：ggplot有四种element function，分别是`element_text()`，`element_line()`，`element_rect()`，`element_blank()`。
-   `theme()`：使用该函数对ggplot中的默认参数值进行覆盖，例如`theme(panel.background = element_rect(fill = "white"))`
-   `theme_*()`：ggplot提供了许多方便的theme函数，例如`theme_classic()`，`theme_minimal()`，`theme_dark()`。

## Complete themes

ggplot 提供了8种预设的主题，分别是`theme_grey()`，`theme_bw()`，`theme_linedraw()`，`theme_light()`，`theme_dark()`，`theme_minimal()`，`theme_classic()`，`theme_void()`。每一个主题都有`base_size`参数，用来设置字体大小，默认title是其1.2倍，label是其0.8倍。

```{r}
#| layout-ncol: 3

library(tidyverse)
df <- data.frame(x = 1:3, y = 1:3)
base <- ggplot(df, aes(x, y)) +
  geom_point()

base + theme_grey() + ggtitle("theme_grey()")
base + theme_bw() + ggtitle("theme_bw()")
base + theme_linedraw() + ggtitle("theme_linedraw()")
```

```{r}
#| layout-ncol: 3

base + theme_light() + ggtitle("theme_light()")
base + theme_dark() + ggtitle("theme_dark()")
base + theme_minimal() + ggtitle("theme_minimal()")
```


```{r}
#| layout-ncol: 2

base + theme_classic() + ggtitle("theme_classic()")
base + theme_void() + ggtitle("theme_void()")
```

## Modifying theme components

ggplot 中有四个设置element的函数：`element_blank()`，`element_text()`，`element_line()`，`element_rect()`。

### element_blank()

与设置元素为透明或不可见不同，`element_blank()`会清除一个元素所占用的空间。

```{r}
#| layout-ncol: 3

base
last_plot() + theme(panel.grid.minor = element_blank())
last_plot() + theme(panel.grid.major = element_blank())
```

### element_text()

该函数控制元素为文本的样式，包括字体，字号，颜色等。可用参数有：

-   `family`：字体
-   `face`：粗体/斜体/正常
-   `color`：颜色
-   `size`：字号
-   `hjust`：水平方向调整，[0,1]
-   `vjust`：垂直方向调整，[0,1]
-   `angle`：角度，[0,360]
-   `lineheight`：行高，在分面中设置标签栏的高度
-   `margin`：字体上，右，下，左的边缘距离。
-   `debug`：凸显字体


```{r}
set.seed(123)
df <- data.frame(
  x = c("aaaa", "bbbb", "cccc", "dddd"),
  y = rnorm(120, c(1, 2, 1)),
  z = LETTERS[1:3]
)

ggplot(df, aes(x, y)) +
  geom_point(aes(colour = z)) +
  facet_wrap(~z) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 0),
    strip.text = element_text(color = "orange", lineheight = 0.5)
  )
library("tidyverse")
df0 <- mtcars %>%
  rownames_to_column("car") %>%
  mutate(car = str_wrap(car, width = 10))

ggplot(data = df0, aes(x = car, y = mpg)) +
  geom_bar(stat = "identity") +
  coord_flip()

# has no effect
par(lheight = 0.5)
ggplot(data = df0, aes(x = car, y = mpg)) +
  geom_bar(stat = "identity") +
  coord_flip()

```

### element_line()

该函数控制元素为线的样式，包括颜色，宽度，类型等。可用参数有：

-   `colour`：颜色
-   `linewidth`：线宽
-   `linetype`：线类型
-   `lineend`：线端点类型
-   `linejoin`：线连接类型
-   `arrow`：箭头

```{r}
base + theme(panel.grid.major = element_line(colour = "black", linewidth = 2, linetype = "dotted"))
```

### element_rect()

该函数控制元素为矩形的样式，包括颜色，填充，边框等。可用参数有：

-   `fill`：填充颜色
-   `colour`：边框颜色
-   `linewidth`：边框线宽
-   `linetype`：边框线类型

```{r}
#| layout-ncol: 3

base + theme(plot.background = element_rect(fill = "grey80", colour = NA))
base + theme(plot.background = element_rect(colour = "red", linewidth = 2))
base + theme(panel.background = element_rect(fill = "linen"))
```