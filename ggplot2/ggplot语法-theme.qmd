---
title: "ggplot语法-theme"
author: "大番薯本薯"
format: "html"
fig-width: 4
fig-height: 4
fig-align: center
execute:
  warning: false
---

# ggplot语法-theme

ggplot 中唯一不对数据产生影响的设置就是`theme`，其只涉及像`font`,`tick`,`panel strip`,`background`等。

ggplot提供了四个层级的设置函数：

-   `elements`：具体的元素，如`plot.title`，`axis.ticks.x`。
-   `element function`：ggplot有四种element function，分别是`element_text()`，`element_line()`，`element_rect()`，`element_blank()`。
-   `theme()`：使用该函数对ggplot中的默认参数值进行覆盖，例如`theme(panel.background = element_rect(fill = "white"))`
-   `theme_*()`：ggplot提供了许多方便的theme函数，例如`theme_classic()`，`theme_minimal()`，`theme_dark()`。

## Complete themes

ggplot 提供了8种预设的主题，分别是`theme_grey()`，`theme_bw()`，`theme_linedraw()`，`theme_light()`，`theme_dark()`，`theme_minimal()`，`theme_classic()`，`theme_void()`。每一个主题都有`base_size`参数，用来设置字体大小，默认title是其1.2倍，label是其0.8倍。

```{r}
#| layout-ncol: 3

library(tidyverse)
df <- data.frame(x = 1:3, y = 1:3)
base <- ggplot(df, aes(x, y)) +
  geom_point()

base + theme_grey() + ggtitle("theme_grey()")
base + theme_bw() + ggtitle("theme_bw()")
base + theme_linedraw() + ggtitle("theme_linedraw()")
```

```{r}
#| layout-ncol: 3

base + theme_light() + ggtitle("theme_light()")
base + theme_dark() + ggtitle("theme_dark()")
base + theme_minimal() + ggtitle("theme_minimal()")
```


```{r}
#| layout-ncol: 2

base + theme_classic() + ggtitle("theme_classic()")
base + theme_void() + ggtitle("theme_void()")
```

## Modifying theme components

ggplot 中有四个设置element的函数：`element_blank()`，`element_text()`，`element_line()`，`element_rect()`。

### element_blank()

与设置元素为透明或不可见不同，`element_blank()`会清除一个元素所占用的空间。

```{r}
#| layout-ncol: 3

base
last_plot() + theme(panel.grid.minor = element_blank())
last_plot() + theme(panel.grid.major = element_blank())
```

### element_text()

该函数控制元素为文本的样式，包括字体，字号，颜色等。可用参数有：

-   `family`：字体
-   `face`：粗体/斜体/正常
-   `color`：颜色
-   `size`：字号
-   `hjust`：水平方向调整，[0,1]
-   `vjust`：垂直方向调整，[0,1]
-   `angle`：角度，[0,360]
-   `lineheight`：多行字符时，设置行高
-   `margin`：字体上，右，下，左的边缘距离。
-   `debug`：凸显字体


```{r}
set.seed(123)
df <- data.frame(
  x = c("aaa", "bbb", "ccc", "ddd"),
  y = rnorm(120, c(1, 2, 1)),
  z = c("longlonglong\nlonglonglong", "short", "median")
)

ggplot(df, aes(x, y)) +
  geom_point(aes(colour = z)) +
  facet_wrap(~z) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 12),
    strip.text = element_text(color = "orange", lineheight = 2)
  )
```

### element_line()

该函数控制元素为线的样式，包括颜色，宽度，类型等。可用参数有：

-   `colour`：颜色
-   `linewidth`：线宽
-   `linetype`：线类型
-   `lineend`：线端点类型
-   `linejoin`：线连接类型
-   `arrow`：箭头

```{r}
base + theme(panel.grid.major = element_line(colour = "black", linewidth = 2, linetype = "dotted"))
```

### element_rect()

该函数控制元素为矩形的样式，包括颜色，填充，边框等。可用参数有：

-   `fill`：填充颜色
-   `colour`：边框颜色
-   `linewidth`：边框线宽
-   `linetype`：边框线类型

```{r}
#| layout-ncol: 3

base + theme(plot.background = element_rect(fill = "grey80", colour = NA))
base + theme(plot.background = element_rect(colour = "red", linewidth = 2))
base + theme(panel.background = element_rect(fill = "linen"))
```

## Theme elements

theme中的元素包括5大类：plot，panel，axis，legend，strip。plot 控制整个图形，panel 控制画板，axis 控制坐标轴，legend 控制图例，strip 控制分面。

### plot 相关元素

-   `plot.background`：图背景色，始终在最底层图层，默认为白色，设置为`NA`则透明。
-   `plot.title`,`plot.subtitle`,`plot.caption`,`plot.tag`：标题、副标题、注释、标签。
-   `plot.margin`：图边缘

### panel 相关元素

`panel.background` 与 `panel.border` 中间隔着数据绘图layer层，默认`panel.border = element_rect(fill = NA)`。

-   `panel.background`：画板背景色
-   `panel.border`：画板边框
-   `panel.grid`：画板网格
-   `panel.grid.major`：主网格线
-   `panel.grid.minor`：次网格线
-   `panel.spacing`：画板间距，当使用分面时考虑。
-   `panel.ontop`：画板中除`boder`外的元素是否在数据layer层上。
-   `aspect.ratio`：画板宽高比

```{r}
#| layout-ncol: 3

df <- data.frame(x = 1:4, y = 1:4, z = rep(c("a", "b"), each = 2))
base <- ggplot(df, aes(x, y)) +
  geom_point()

base + theme(panel.background = element_rect(fill = "lightblue"))

base + theme(aspect.ratio = 9 / 16)

base + theme(panel.grid.major.x = element_line(color = "gray60", linewidth = 0.8))
```

### axis 相关元素

-   `axis.title`：轴标题
-   `axis.text`：轴刻度文本
-   `axis.ticks`：轴主刻度线
-   `axis.minor.ticks`：轴次刻度线
-   `axis.ticks.length`：轴主刻度线长度，使用`unit`控制单位和方向。
-   `axis.minor.ticks.length`：轴次刻度线长度
-   `axis.line`：轴线

```{r}
df <- data.frame(x = 1:3, y = 1:3)
ggplot(df, aes(x, y)) +
  geom_point() +
  theme(
    axis.title.x = element_blank(),
    axis.line = element_line(colour = "grey50", linewidth = 1),
    axis.text = element_text(color = "blue", size = 12),
    axis.text.x = element_text(angle = -90, vjust = 0.5)
  )
```

### legend 相关元素

图例的控制也可以使用`guide_legend()`或`guide_colorbar()`进行设置。

#### 整个图例box

无论有几种图例，存在一个图例框——`box`来将其视作一个整体。使用`box`相关元素控制多个图例的控制方式。

-   `legend.box`：多个图例在box中如何排列，水平方向还是垂直方向
-   `legend.box.just`：多个图例在box中的对齐方式：`left`,`right`,`top`,`bottom`。
-   `legend.box.background`：box的背景。
-   `legend.box.margin`：box的边缘。
-   `legend.box.spacing`：box距绘图区域的距离。
-   `legend.location`：box的位置与`plot`对齐还是和`panel`对齐。
-   `legend.position`：box在图中的位置：`left`,`right`,`top`,`bottom`,`inside`。
-   `legend.position.inside`：当为`inside`时，给长度为2，范围为[0,1]的数值向量。


#### 单个图例

-   `legend.direction`：图例方向
-   `legend.background`：每个图例的背景色
-   `legend.margin`：每个图例的边缘
-   `legend.spacing`：每个图例的间距

-   `legend.key`：
-   `legend.frame`：
-   `legend.ticks`：
-   `legend.ticks.length`：
-   `legend.axis.line`：

-   `legend.text`：
-   `legend.text.position`：
-   `legend.title`：
-   `legend.title.position`：


-   `legend.byrow`：
-   `legend.justification`：



```{r}
df <- data.frame(X = 1:4, Y = 1:4, Z = rep(c("a", "b"), each = 2))
ggplot(df, aes(X, Y, shape = Z, colour = Y, size = X)) +
  geom_point() +
  theme(
    legend.box = "vertical",
    legend.box.background = element_rect(
      fill = "red",
      colour = "black",
      linewidth = 1
    ),
    legend.box.just = "right",
    legend.location = "plot",
    legend.justification.left = c(0.5, 0.8),
    legend.byrow = FALSE,
    legend.direction = "horizontal",
    legend.position = "inside",
    legend.position.inside = c(0.8, 0.8),
    legend.key = element_rect(color = "red"),
    legend.frame = element_rect(color = "green"),
    legend.axis.line = element_line(linewidth = 3, color = "black"),
    legend.text = element_text(face = "italic"),
    legend.title = element_text(face = "bold")
  )

```