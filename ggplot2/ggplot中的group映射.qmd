---
title: "ggplot中的group映射"
author: "大番薯本薯"
format: "markdown"
fig-width: 5
fig-align: center
execute:
  warning: false
---

美学映射`group`用来给数据分组，使用组内数据，或原始数据，或计算后的数据，进行美学映射赋值。 \## group 映射 在使用ggplot的过程中，我们可能很少见到`group`这个美学映射，但我们却无时无刻不在使用它。因为ggplot默认会将`group`映射到所有离散变量中。如果没有离散变量，需要声明`group`的映射，否则结果可能会出乎意料。 例如：下面示例，使用mtcars数据，绘制不同cyl时disp的箱线图。结果只有一个箱线图 @fig-one-box ，并未出现预料的三个箱线图。

```{r}
# 加载R包及数据
library(tidyverse)
data(mtcars)
```

```{r}
#| label: fig-one-box
#| fig-cap: "one box"
#| warning: true
ggplot(mtcars, aes(cyl, disp)) +
  geom_boxplot()
```

查看数据类型，可以发现，cyl是`numeric`类型，并非离散变量。此时声明`group = cyl`，即可出现三个箱线图。在平常使用中，我们可能会先将cyl转换为因子，这样更好控制类别出现在x轴上的顺序。

```{r}
#| label: fig-three-box
#| fig-cap: "three-box"
class(mtcars$cyl)
ggplot(mtcars, aes(cyl, disp, group = cyl)) +
  geom_boxplot()
```

假如你想查看多个分组的结果，可以使用`interaction`。

```{r}
#| fig-cap: "interaction"
ggplot(mtcars, aes(cyl, disp, group = interaction(cyl, gear))) +
  geom_boxplot()
```

上面的例子，在平常使用中，我们更习惯下面的写法

```{r}
#| fig-cap: "常见写法"
ggplot(mtcars, aes(as.factor(cyl), disp, color = as.factor(gear))) +
  geom_boxplot()
```

## line 中的group映射

确定一条直线至少需要两点，那么ggolot如何处理这两个点的值将美学映射给直线？答案是`遵循第一个点`原则：即使用第一个点的值作为线段美学映射的值。注意：在多条连续的线段中，最后一个点的值没有使用。

```{r}
#| layout-ncol: 2
#| fig-cap:
#|  - "离散"
#|  - "连续"
df <- data.frame(x = 1:3, y = 1:3, colour = c(1, 3, 5))

ggplot(df, aes(x, y, colour = factor(colour))) +
  geom_line(aes(group = 1), linewidth = 2) +
  geom_point(size = 5)

ggplot(df, aes(x, y, colour = colour)) +
  geom_line(aes(group = 1), linewidth = 2) +
  geom_point(size = 5)
```

## group 的等级关系

在上面的例子中，如果你去掉`aes(group = 1)`会发现无法绘制线图，这是因为在ggplot中已经默认了`group = colour`，并且将值传给了后面的每个geom。当你添加使用所有数据为一个组`aes(group = 1)`时，就会将ggplot传的值覆盖。下面引出ggplot中的参数等级： - ggplot处的参数为公用参数，会自动传给每一层绘图geom(layer)。 - 每一层绘图geom(layer)的参数会覆盖ggplot处的参数。